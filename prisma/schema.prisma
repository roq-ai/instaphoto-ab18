generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model business {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  address     String?  @db.VarChar(255)
  phone       String?  @db.VarChar(255)
  website     String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model comment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String   @db.VarChar(255)
  user_id    String   @db.Uuid
  post_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  post       post     @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model follow {
  id                             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  follower_id                    String   @db.Uuid
  following_id                   String   @db.Uuid
  created_at                     DateTime @default(now()) @db.Timestamp(6)
  updated_at                     DateTime @default(now()) @db.Timestamp(6)
  user_follow_follower_idTouser  user     @relation("follow_follower_idTouser", fields: [follower_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_follow_following_idTouser user     @relation("follow_following_idTouser", fields: [following_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model like {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  post_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  post       post     @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model post {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  caption    String?   @db.VarChar(255)
  location   String?   @db.VarChar(255)
  user_id    String    @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  comment    comment[]
  like       like[]
  user       user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                            String     @unique @db.VarChar(255)
  firstName                        String?    @db.VarChar(255)
  lastName                         String?    @db.VarChar(255)
  roq_user_id                      String     @db.VarChar(255)
  tenant_id                        String     @db.VarChar(255)
  created_at                       DateTime   @default(now()) @db.Timestamp(6)
  updated_at                       DateTime   @default(now()) @db.Timestamp(6)
  business                         business[]
  comment                          comment[]
  follow_follow_follower_idTouser  follow[]   @relation("follow_follower_idTouser")
  follow_follow_following_idTouser follow[]   @relation("follow_following_idTouser")
  like                             like[]
  post                             post[]
}
